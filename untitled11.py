# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y4FxqrB7hFfacWFtSKs746w8OWENfiQG
"""

import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')  # Avoids GUI-related issues
import matplotlib.pyplot as plt
import seaborn as sns

# Prompt the user for the file path
file_path = input("Enter the path to the Excel file: ")

# Load the data
try:
    data = pd.read_excel(file_path)
except FileNotFoundError:
    raise ValueError("The file was not found. Please check the path and try again.")
except Exception as e:
    raise ValueError(f"Error reading the Excel file: {e}")

# Display first few rows
print("First 10 rows of the dataset:")
print(data.head(10))

# Check for required columns
required_columns = ['DocDate', 'type', 'parName', 'CATEGORY', 'weight', 'noPcs']
missing_columns = [col for col in required_columns if col not in data.columns]
if missing_columns:
    raise ValueError(f"The dataset must contain these columns: {missing_columns}")

# Remove unwanted categories
excluded_categories = [
    'ST', 'LOOSE PCS', 'PARA BIDS', 'Langadi', 'PROCESS LOSS', 
    'SCRAP PCC', 'BALL CHAIN', 'SIGNING TAR', 'Fine'
]
df = data[~data['CATEGORY'].isin(excluded_categories)]

# Print unique categories before and after filtering
print("Unique categories before deletion:", data['CATEGORY'].unique())
print("Unique categories after deletion:", df['CATEGORY'].unique())

# Group by parName and calculate weight summary
party_weight_summary = df.groupby('parName')['weight'].sum().reset_index()

# Top 10 and Bottom 5 parties by weight
top_10_parties = party_weight_summary.sort_values(by='weight', ascending=False).head(10)
bottom_5_parties = party_weight_summary.sort_values(by='weight', ascending=True).head(5)

print("\nTop 10 Parties by Weight:")
print(top_10_parties)
print("\nBottom 5 Parties by Weight:")
print(bottom_5_parties)

# Category-wise summary
category_summary = df.groupby('CATEGORY').agg({
    'weight': 'sum',
    'noPcs': 'sum'
}).reset_index()

# Sort categories by weight
category_summary_sorted = category_summary.sort_values(by='weight', ascending=False)

# Top 10 and Bottom 5 categories by weight
top_10_categories = category_summary_sorted.head(10)
bottom_5_categories = category_summary_sorted.tail(5)

print("\nTop 10 Categories by Weight:")
print(top_10_categories)
print("\nBottom 5 Categories by Weight:")
print(bottom_5_categories)

# Bar Plot: Top 10 Parties by Weight
plt.figure(figsize=(10, 6))
sns.barplot(x='weight', y='parName', data=top_10_parties, palette='Blues_r')
plt.title('Top 10 Parties by Weight', fontsize=16)
plt.xlabel('Weight', fontsize=12)
plt.ylabel('Party Name', fontsize=12)
plt.tight_layout()
plt.savefig("top_10_parties_by_weight.png")
plt.close()

# Bar Plot: Bottom 5 Parties by Weight
plt.figure(figsize=(10, 6))
sns.barplot(x='weight', y='parName', data=bottom_5_parties, palette='Reds_r')
plt.title('Bottom 5 Parties by Weight', fontsize=16)
plt.xlabel('Weight', fontsize=12)
plt.ylabel('Party Name', fontsize=12)
plt.tight_layout()
plt.savefig("bottom_5_parties_by_weight.png")
plt.close()

# Pie Chart: Category-wise Weight Distribution (Top 15)
plt.figure(figsize=(8, 8))
top_15_categories = category_summary_sorted.head(15)
plt.pie(top_15_categories['weight'], labels=top_15_categories['CATEGORY'],
        autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Category-wise Weight Distribution (Top 15)', fontsize=16)
plt.axis('equal')
plt.tight_layout()
plt.savefig("category_weight_distribution.png")
plt.close()

# Bar Plot: Top 10 Categories by Weight
plt.figure(figsize=(10, 6))
sns.barplot(x='weight', y='CATEGORY', data=top_10_categories, palette='Greens_r')
plt.title('Top 10 Categories by Weight', fontsize=16)
plt.xlabel('Weight', fontsize=12)
plt.ylabel('Category', fontsize=12)
plt.tight_layout()
plt.savefig("top_10_categories_by_weight.png")
plt.close()

# Bar Plot: Bottom 5 Categories by Weight
plt.figure(figsize=(10, 6))
sns.barplot(x='weight', y='CATEGORY', data=bottom_5_categories, palette='Oranges_r')
plt.title('Bottom 5 Categories by Weight', fontsize=16)
plt.xlabel('Weight', fontsize=12)
plt.ylabel('Category', fontsize=12)
plt.tight_layout()
plt.savefig("bottom_5_categories_by_weight.png")
plt.close()

# Bar Plot: Sum of noPcs per Category
plt.figure(figsize=(10, 6))
sns.barplot(x='noPcs', y='CATEGORY', 
            data=category_summary_sorted.head(15), palette='coolwarm')
plt.title('Number of Pieces of Top 15 Categories', fontsize=16)
plt.xlabel('Number of Pieces', fontsize=12)
plt.ylabel('Category', fontsize=12)
plt.tight_layout()
plt.savefig("top_15_categories_noPcs.png")
plt.close()

# Line Plot: Weight Over Time
try:
    df['DocDate'] = pd.to_datetime(df['DocDate'], errors='coerce')
    time_series = df.groupby('DocDate')['weight'].sum().reset_index()

    plt.figure(figsize=(10, 6))
    sns.lineplot(x='DocDate', y='weight', data=time_series, marker='o', color='blue')
    plt.title('Total Weight Over Time', fontsize=16)
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Total Weight', fontsize=12)
    plt.tight_layout()
    plt.savefig("total_weight_over_time.png")
    plt.close()
except Exception as e:
    print(f"Error in time-series plot: {e}")

